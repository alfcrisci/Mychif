mycotoxins_data=read.csv("https://alfcrisci.github.io/michyf/mycotoxins.csv")
mycotoxins_data=read.csv("https://alfcrisci.github.io/Michyf/mycotoxins.csv")
source('https://alfcrisci.github.io/Mychif/plot_senstivity_aux.r')
BW <- BW            # bodyweight (kg)
read.csv("https://alfcrisci.github.io/Mychif/mycotoxins.csv")
library(rinat)
install.packages("rinat")
library(rinat)
butterflies <- get_inat_obs(query = "Nictalus Leisleri")
get_inat_obs(query = "Nottola")
install.packages("fftw")
install.packages("fftw")
install.packages("fftw")
install.packages("fftwtools")
library("pomp")
library(pomp)
devtools::install_github("kingaa/pomp")
#The R functions for the Ensemble Kalman filter (EnKF)
#can be downloaded from:
source("http://www.datall-analyse.nl/R/EnKF.R")
#Have a look at the function EnKF, and notice that at the beginning of
#the script you will find a description of the function's arguments.
EnKF
EnKF
install.packages("remotes")
remotes::install_github("mrdwab/koboloadeR")
library(devtools)
install_github("unhcr/koboloadeR", ref = "gh-pages")
library("koboloadeR")
kobo_datasets(user = "simvergari:simone1968", api = "kobo")
kobo_datasets(user = "simvergari::simone1968", api = "kobo")
kobo_datasets(user = "simvergari:simone1968", api = "unhcr")
library("koboloadeR")
kobo_datasets(user = "simvergari:simone1968", api = "unhcr")
kobo_datasets2(user = "simvergari:simone1968", api = "unhcr")
library(koboloadeR)
kobo_datasets2(user = "simvergari:simone1968", api = "unhcr")
kobo_datasets()
library(koboloadeR)
detach("package:koboloadeR", unload = TRUE)
library(koboloadeR)
remove.packages("koboloadeR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remotes::install_github("mrdwab/koboloadeR")
library(koboloadeR)
kobo_datasets(user = "simvergari:simone1968", api = "unhcr")
kobo_datasets(user = "simvergari:simone1968")
remove.packages("koboloadeR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages(koboloadeR)
install.packages("koboloadeR")
install.packages("koboloadeR")
Sys.getenv()
install_github("unhcr/koboloadeR", ref = "gh-pages")
devtools::install_github("unhcr/koboloadeR", ref = "gh-pages")
kobo_data_downloader("123456", "username:password")
library(koboloadeR)
kobo_apps("data_viewer")
kobo_app("data_viewer")
library(xts)
library(lubridate)
library(XLConnect)
require(utils)
library(rJava)
library(rJava)
library(rJava)
remove.packages("rJava", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(rJava)
install.packages("rJava")
library(xts)
library(lubridate)
library(XLConnect)
require(utils)
library(XLConnect)
library(rJava)
remove.packages("rJava", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
Sys.setenv("JAVA_HOME")=""
Sys.setenv(JAVA_HOME='.')
Sys.getenv("JAVA_HOME")
install.packages("rJava")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='usr/lib/jvm/java-11-openjdk-amd64/bin/java/bin')
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='usr/lib/jvm/java-11-openjdk-amd64/bin/java/bin')
install.packages("rJava")
Sys.setenv(JAVA_HOME=/usr/lib/jvm/java-11-openjdk')
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-11-openjdk")
install.packages("rJava")
if (is.na(Sys.getenv("JAVA_HOME", unset = NA)) &&
file.exists("/usr/libexec/java_home"))
{
JAVA_HOME <- tryCatch(
system("/usr/libexec/java_home", intern = TRUE),
error = function(e) ""
)
if (nzchar(JAVA_HOME))
Sys.setenv(JAVA_HOME = JAVA_HOME)
}
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
?cut
tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5)
x <- rep(0:8, tx0)
x
breaks = 3*(-2:5))
breaks = 3*(-2:5)
brasks
breasks
breaks
breaks=0:120:20
breaks=0:20:120
breaks=0:120
breaks
breaks=seq(0,150,20)
brasks
breaks
breaks=c(-1,0,5,10,15,20,30,40,50,60,80,100,120,150,200)
pp=rep(0,200)
pp
pp=c(rep(0,100),rep(10,100))
pp=c(rep(0,100),rep(10,100),250)
pp
cut(pp,breaks)
pp=c(rep(0,100),0.1,rep(12,100),250)
cut(pp,breaks)
pp=c(rep(0,100),0.001,rep(12,100),250)
cut(pp,breaks)
freq   = hist(pp, breaks=breaks, include.lowest=TRUE, plot=FALSE)
br=c(-1,0,5,10,15,20,30,40,50,60,80,100,120,150,200)
freq   = hist(pp, breaks=br, include.lowest=TRUE, plot=FALSE)
freq(pp, breaks=br, include.lowest=TRUE, plot=FALSE)
freq(pp, breaks=br, include.lowest=TRUE, right = FALSE)
hist(pp, breaks=br, include.lowest=TRUE, right = FALSE)
?hist
br
hist(pp, breaks=br, include.lowest=TRUE, right = FALSE)
hist(pp, breaks=br, include.lowest=TRUE)
hist(pp, breaks=br)
br=c(-1,0,5,10,15,20,30,40,50,60,80,100,120,150,200,2000)
hist(pp, breaks=br)
a=hist(pp, breaks=br)
a
hist(pp, breaks=br)$density
sum(hist(pp, breaks=br)$density)
?hist
hist(pp, breaks=br)$density
cut(pp, breaks=br)
table(cut(pp, breaks=br))
?cumsum
pnorm(2)
1-pnorm(2)
?pnorm
pnorm(2,
lower.tail=F)
pnorm(2)
pnorm(-2)
qnorm
qnorm(0.05)
qnorm(2)
qnorm(1)
qnorm(0.99)
qnorm(0.999)
pnorm(1.96)
?qnorm
?pnorm
erf(2)
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
erf(2)
library(HeatStress)
rBiometeo::dewpoint(25,60)
devtools::install_github("alfcrisci/rBiometeo")
rBiometeo::dewpoint(25,60)
wbgt.Liljegren(25,16.70536,5,400,"2013-08-21 12:00",43,11)
relh <- dewp2hurs(25,16.70536)
relh
relh <- dewp2hurs(25,16.70535)
dewp2hurs(25,16.70535)
dewp2hurs(25,16.70538)
dewp2hurs(25,16.70540)
dewp2hurs(25,16.7340)
dewp2hurs(25,16.7)
dewp2hurs(25,16)
dewp2hurs(25,16.7)
dewp2hurs(25,16.71)
dewp2hurs(25,16.69)
zenithDeg <- calZenith("2013-08-21", 11, 43," hour="12:00")
zenithDeg <- calZenith("2013-08-21", 11, 43," hour=12)
)
zenithDeg <- calZenith("2013-08-21", 11, 43,hour=12)
zenithDeg
calZenith("2013-08-21 12:00", 11, 43)
calZenith("2019-05-09 12:00", 11, 43)
calZenith("2019-05-09 12:00", 11, 43)
calZenith("2019-05-09 11:00", 11, 43)
calZenith("2019-05-09 13:00", 11, 43)
calZenith("2019-05-09 12:00", 11, 43)
calZenith("2013-08-21 12:00", 11, 43)
calZenith("2013-08-21 13:00", 11, 43)
calZenith("2013-08-21 10:00", 11, 43)
calZenith("2013-08-21 14:00", 11, 43)
calZenith("2013-08-31 14:00", 11, 43)
acos(0.1021)
cos(30)
?calZenith
calZenith("2013-08-21 14:00", 11, 43)
calZenith("2019-10-15 11:15", 11, 43)
calZenith("2019-10-15 13:15", 11, 43)
90-calZenith("2019-10-15 13:15", 11, 43)
90-calZenith("2019-10-15 11:15", 11, 43)
90-calZenith("2019-10-15 9:15", 11, 43)
calZenith("2019-10-15 9:15", 11, 43)
90-calZenith("2019-10-15 9:15", 11, 43)
90-calZenith("2019-10-15 12:15", 11, 43)
calZenith("2019-10-15 12:15", 11, 43)
90-calZenith("2019-10-15 11:19", 11, 43)
calZenith("2019-10-15 11:19", 11, 43)
install.packages("sunCalc")
install.packages("suncalc")
library("sunCalc")
library("suncalc")
getSunlightPosition("2019-10-15 11:19", 11, 43)
calZenith("2019-10-15 11:19", 11, 43)
90-calZenith("2019-10-15 11:19", 11, 43)
deg2rad(38.59618)
radians(38.59618)
rBiometeo::deg2rad(38.59618)
install.packages("pracma")
pracma::deg2rad(38.59618)
pracma::deg2rad(90-38.59618)
calZenith("2019-10-15 11:19", 11, 43)
calZenith("2019-10-15", 11, 43)
getSunlightPosition("2019-10-15 12:00", 11, 43)
?getSunlightPosition
devtools::install_github("mdljts/wbgt")
wbgt(2013, 1, 2, 4, 4,0, 15, 43, 11, 400, 1017.8, 12, 45, 1.24, 2.1, -0.1, 0)$Twbg
wbgt::wbgt(2013, 1, 2, 4, 4,0, 15, 43, 11, 400, 1017.8, 12, 45, 1.24, 2.1, -0.1, 0)$Twbg
wbgt::wbgt(2013, 1, 2, 4, 4,0, 15, 43, 11, 400, 1017.8, 25, 40, 2, 2.1, 0, 0)$Twbg
wbgt::wbgt(2013, 1, 2, 4, 4,0, 15, 43, 11, 400, 1013.25, 25, 40, 2, 2.1, 0, 0)$Twbg
wbgt.Liljegren(25,16.70536,5,400,"2013-08-21 12:00",11,43)
wbgt::wbgt(2013, 1, 2, 4, 4,0, 15, 43, 11, 400, 1013.25, 25, 60, 2, 2.1, 0, 0)$Twbg
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 2, 2.1, 0, 0)$Twbg
dewp2hurs(25,16.7340)
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 5, 2.1, 0, 0)$Twbg
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 5, 0, 0, 0)$Twbg
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 5, 2, 0, 0)$Twbg
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 5, 10, 0, 0)$Twbg
wbgt::wbgt(2013, 8, 21, 12, 0,0, 15, 43, 11, 400, 1013.25, 25, 60, 5, 2, 0, 0)$Twbg
wbgt.Liljegren(25,16.70536,5,400,"2013-08-21 12:00",11,43)
getSunlightPosition
library(HeatStress)
library(suncalc)
calZenith("2019-10-15", 11, 43)
getSunlightPosition("2019-10-15 12:00", 11, 43)
getSunlightPosition
calZenith("2019-10-15", 11, 43)
getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude
pracma$degtorad(calZenith("2019-10-15", 11, 43))
getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude
pracma$degtorad(calZenith("2019-10-15", 11, 43))
pracma::degtorad(calZenith("2019-10-15", 11, 43))
pracma::deg2rad(calZenith("2019-10-15", 11, 43))
pracma::deg2rad(calZenith("2019-10-15 12:00", 11, 43))
getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude
pracma::deg2rad(1-calZenith("2019-10-15 12:00", 11, 43))
calZenith("2019-10-15 12:00", 11, 43)
pracma::rad2deg(getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude)
calZenith("2019-10-15 12:00", 11, 43)
pracma::rad2deg(getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude)
calZenith("2019-10-15 12:00", 11, 43)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude)
calZenith("2019-10-15 12:00", 11, 43)
calZenith("2019-10-15 12:00", 11, 43)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00", 11, 43)$altitude)
getSunlightPosition
calZenith("2019-10-15 12:00", 11, 43)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
> calZenith("2019-10-15 14:00", 11, 43)
calZenith("2019-10-15 14:00", 11, 43)
calZenith("2019-10-15T14:00", 11, 43)
calZenith("2019-10-15 12:00", 11, 43)
?calZenith
calZenith("2019-10-15 12:00", 11, 43,hour=T)
calZenith("2019-10-15 14:00", 11, 43,hour=T)
calZenith("2019-10-15 14:20", 11, 43,hour=T)
calZenith("2019-10-15 15:20", 11, 43,hour=T)
pracma::rad2deg(getSunlightPosition("2019-10-15 15:00:00", 43, 11)$altitude)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 15:00:00", 43, 11)$altitude)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 10:00:00", 43, 11)$altitude)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 11:00:00", 43, 11)$altitude)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
90-calZenith("2019-10-15 12:00", 11, 43,hour=T)
90-calZenith("2019-10-15 14:00", 11, 43,hour=T)
90-calZenith("2019-10-15 10:00", 11, 43,hour=T)
calZenith("2013-08-21 12:00", 11, 43)
pracma::deg2rad(calZenith("2013-08-21 12:00", 11, 43))
wbgt.Liljegren(25,16.70536,5,400,"2013-08-21 12:00",11,43)
calZenith("2013-08-21 12:00", 11, 43)
100-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
90-pracma::rad2deg(getSunlightPosition("2019-10-15 12:00:00", 43, 11)$altitude)
install.packages("rdwd", dependencies="Suggests")
install.packages("OpenStreetMap")
install.packages("berryFunctions")
install.packages("OSMscale")
remotes::install_github("brry/rdwd")
data_occ=readRDS("data/data_occ.rds")
DB_DATA_TRUE=readRDS("data/DB_DATA_TRUE.rds")
temp_plan_raw=readRDS("data/template.rds")
mycorank=readRDS("data/mycorank.rds")
plantrank=readRDS("data/plantrank.rds")
#####################################################################################################################################
setwd("")
setwd("/home/alf/Scrivania/lav_michyf/repositories/Mychif/occurence")
dir
dir()
source("load_lib.r")
source("aux_mycosources.r")
data_occ=readRDS("data/data_occ.rds")
DB_DATA_TRUE=readRDS("data/DB_DATA_TRUE.rds")
by_plant=split(DB_DATA_TRUE,DB_DATA_TRUE$sampMatbased)
plants=unique(DB_DATA_TRUE$sampMatbased) #
mycotoxins=unique(DB_DATA_TRUE$paramType) # mycotoxins
table_plants_mycotoxin=as.data.frame.array(table(DB_DATA_TRUE$sampMatbased,
DB_DATA_TRUE$paramType))
mycorank=sort(colSums(table_plants_mycotoxin), decreasing = T)
plantrank=sort(rowSums(table_plants_mycotoxin),decreasing = T)
aux_info_mycotox=data_occ[id_overlod_full,c("sampYearIncreas","Co_occurrence","Ref")]
aux_info_mycotox$agepaper=2019-as.numeric(unlist(lapply(regmatches(aux_info_mycotox$Ref,gregexpr("[[:digit:]]+", aux_info_mycotox$Ref)),function(x) x[1])))
years_paper=aux_info_mycotox$agepaper
res_tot=readRDS("data/res_tot_min5.rds")
res_data=readRDS("data/res_data_min5.rds")
res_names=readRDS("data/res_names_min5.rds")
res_pooled=readRDS("data/res_pooled_min5.rds")
plant_myco_db=read.csv(textConnection(gsub("_",",",unlist(res_names))),header=F)
names(plant_myco_db)=c("plants","mycotoxins")
plant_myco_db$ndata_valid=unlist(lapply(res_pooled,length))
plant_myco_db$nrecords=unlist(lapply(res_tot,nrow))
real_value_bibintensity=unlist(lapply(res_tot,function(x) length(unique((x$Ref)))))
real_value_bibintensity
c(min(real_value_bibintensity),min(real_value_bibintensity),)
c(min(real_value_bibintensity),min(real_value_bibintensity))
c(min(real_value_bibintensity),max(real_value_bibintensity))
XLConnect::writeWorksheetToFile("data/values_bibintensity_5_updated.xls",real_value_bibintensity,"bib_intens_more5")
real_value_bibintensity
plant_myco_db
cbind(plant_myco_db[,1:2],real_value_bibintensity)
file.remove("data/values_bibintensity_5_updated.xls")
XLConnect::writeWorksheetToFile("data/values_bibintensity_5_updated.xls",cbind(plant_myco_db[,1:2],real_value_bibintensity),"bib_intens_more5")
