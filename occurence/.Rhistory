file.remove("data/mycotoxins_score_co_occurence.xls")
XLConnect::writeWorksheetToFile("data/mycotoxins_score_co_occurence.xls",plant_myco_db_co_occ,"data_co_occ")
plant_myco_db_co_occ$score_numerosity=ifelse(plant_myco_db_co_occ$ndata_valid>25,1,plant_myco_db_co_occ$ndata_valid/25)
plant_myco_db_co_occ$score_validity=plant_myco_db_co_occ$ndata_valid/plant_myco_db_co_occ$nrecords
plant_myco_db_co_occ$p_sampsize=range01(unlist(lapply(res_tot_co_occ,function(x) mean(x$norm_sampSize,na.rm=T))))
plant_myco_db_co_occ$p_agepaper=range01(scale(unlist(lapply(res_tot_co_occ,function(x) mean(x$norm_agepaper,na.rm=T))),center=F))
plant_myco_db_co_occ$p_agepaper=ifelse(is.na(plant_myco_db_co_occ$p_agepaper),0,plant_myco_db_co_occ$p_agepaper)
plant_myco_db_co_occ$p_havebounds=unlist(lapply(res_tot_co_occ,function(x) mean(x$havebounds)))
plant_myco_db_co_occ$scoreGEN=plant_myco_db_co_occ$score_numerosity+
plant_myco_db_co_occ$score_validity+
plant_myco_db_co_occ$p_havebounds+
plant_myco_db_co_occ$p_sampsize+
plant_myco_db_co_occ$p_agepaper
file.remove("data/mycotoxins_score_co_occurence.xls")
XLConnect::writeWorksheetToFile("data/mycotoxins_score_co_occurence.xls",plant_myco_db_co_occ,"data_co_occ")
saveRDS(plant_myco_db_co_occ,"data/plant_myco_db_occ_tot.rds")
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
# merging DON & FB
DB_co_occ_paola_maize$paramType[grep("DON",DB_co_occ_paola_maize$paramType)]="DONs"
DB_co_occ_paola_maize$paramType[grep("FB",DB_co_occ_paola_maize$paramType)]="FBs"
DB_co_occ_paola_wheat$paramType[grep("DON",DB_co_occ_paola_wheat$paramType)]="DONs"
DB_co_occ_paola_oat$paramType[grep("DON",DB_co_occ_paola_oat$paramType)]="DONs"
DB_co_occ_paola_barley$paramType[grep("DON",DB_co_occ_paola_barley$paramType)]="DONs"
#################################################################################################
# WORKING on last requests of Paola
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
# merging DON & FB
DB_co_occ_paola_maize$paramType[grep("DON",DB_co_occ_paola_maize$paramType)]="DONs"
DB_co_occ_paola_maize$paramType[grep("FB",DB_co_occ_paola_maize$paramType)]="FBs"
DB_co_occ_paola_wheat$paramType[grep("DON",DB_co_occ_paola_wheat$paramType)]="DONs"
DB_co_occ_paola_oat$paramType[grep("DON",DB_co_occ_paola_oat$paramType)]="DONs"
DB_co_occ_paola_barley$paramType[grep("DON",DB_co_occ_paola_barley$paramType)]="DONs"
###########################################################################################################################
DB_co_occ_paola_maize=DB_occ_paola_maize[c(which(DB_co_occ_paola_maize$paramType=="DONs"),
which(DB_co_occ_paola_maize$paramType=="FBs"),
which(DB_co_occ_paola_maize$paramType=="AF")),]
DB_co_occ_paola_wheat=DB_occ_paola_wheat[c(which(DB_co_occ_paola_wheat$paramType=="DONs"),
which(DB_co_occ_paola_wheat$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_barley=DB_occ_paola_barley[c(which(DB_co_occ_paola_barley$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_oat=DB_occ_paola_oat[c(which(DB_occ_paola_oat$paramType=="DONs"),
which(DB_occ_paola_barley$paramType=="ZEN"),
which(DB_occ_paola_oat$paramType=="T2+HT2"),
which(DB_occ_paola_oat$paramType=="NIV")),]
BY_plant_co_occur=list(maize=DB_co_occ_paola_maize,
wheat=DB_co_occ_paola_wheat,
oat=DB_co_occ_paola_oat,
barley=DB_co_occ_paola_barley)
plants_co_occur=names(BY_plant_co_occur) # 4
table_plants_co_occur=reshape::melt(unlist(lapply(BY_plant_co_occur,nrow)))
file.remove("data/table_co_occur_fin.xls")
XLConnect::writeWorksheetToFile("data/table_co_occur_fin.xls",table_plants_co_occur,"table_plants_occur")
#################################################################################################
# WORKING on last requests of Paola
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
# merging DON & FB
DB_co_occ_paola_maize$paramType[grep("DON",DB_co_occ_paola_maize$paramType)]="DONs"
DB_co_occ_paola_maize$paramType[grep("FB",DB_co_occ_paola_maize$paramType)]="FBs"
DB_co_occ_paola_wheat$paramType[grep("DON",DB_co_occ_paola_wheat$paramType)]="DONs"
DB_co_occ_paola_oat$paramType[grep("DON",DB_co_occ_paola_oat$paramType)]="DONs"
DB_co_occ_paola_barley$paramType[grep("DON",DB_co_occ_paola_barley$paramType)]="DONs"
###########################################################################################################################
DB_co_occ_paola_maize=DB_co_occ_paola_maize[c(which(DB_co_occ_paola_maize$paramType=="DONs"),
which(DB_co_occ_paola_maize$paramType=="FBs"),
which(DB_co_occ_paola_maize$paramType=="AF")),]
DB_co_occ_paola_wheat=DB_co_occ_paola_wheat[c(which(DB_co_occ_paola_wheat$paramType=="DONs"),
which(DB_co_occ_paola_wheat$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_barley=DB_co_occ_paola_barley[c(which(DB_co_occ_paola_barley$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_oat=DB_co_occ_paola_oat[c(which(DB_occ_paola_oat$paramType=="DONs"),
which(DB_occ_paola_barley$paramType=="ZEN"),
which(DB_occ_paola_oat$paramType=="T2+HT2"),
which(DB_occ_paola_oat$paramType=="NIV")),]
BY_plant_co_occur=list(maize=DB_co_occ_paola_maize,
wheat=DB_co_occ_paola_wheat,
oat=DB_co_occ_paola_oat,
barley=DB_co_occ_paola_barley)
#################################################################################################
# WORKING on last requests of Paola
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
# merging DON & FB
DB_co_occ_paola_maize$paramType[grep("DON",DB_co_occ_paola_maize$paramType)]="DONs"
DB_co_occ_paola_maize$paramType[grep("FB",DB_co_occ_paola_maize$paramType)]="FBs"
DB_co_occ_paola_wheat$paramType[grep("DON",DB_co_occ_paola_wheat$paramType)]="DONs"
DB_co_occ_paola_oat$paramType[grep("DON",DB_co_occ_paola_oat$paramType)]="DONs"
DB_co_occ_paola_barley$paramType[grep("DON",DB_co_occ_paola_barley$paramType)]="DONs"
###########################################################################################################################
DB_co_occ_paola_maize=DB_co_occ_paola_maize[c(which(DB_co_occ_paola_maize$paramType=="DONs"),
which(DB_co_occ_paola_maize$paramType=="FBs"),
which(DB_co_occ_paola_maize$paramType=="AF")),]
DB_co_occ_paola_wheat=DB_co_occ_paola_wheat[c(which(DB_co_occ_paola_wheat$paramType=="DONs"),
which(DB_co_occ_paola_wheat$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_barley=DB_co_occ_paola_barley[c(which(DB_co_occ_paola_barley$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_oat=DB_co_occ_paola_oat[c(which(DB_co_occ_paola_oat$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_oat$paramType=="T2+HT2"),
which(DB_co_occ_paola_oat$paramType=="NIV")),]
BY_plant_co_occur=list(maize=DB_co_occ_paola_maize,
wheat=DB_co_occ_paola_wheat,
oat=DB_co_occ_paola_oat,
barley=DB_co_occ_paola_barley)
#################################################################################################
# WORKING on merging mycotoxins groups
DB_co_occ_paola_maize=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="maize")),]
DB_co_occ_paola_wheat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="wheat")),]
DB_co_occ_paola_oat=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="oat")),]
DB_co_occ_paola_barley=DB_DATA_TRUE_co_occur[c(which(DB_DATA_TRUE_co_occur$sampMatbased=="barley")),]
# merging DON & FB
DB_co_occ_paola_maize$paramType[grep("DON",DB_co_occ_paola_maize$paramType)]="DONs"
DB_co_occ_paola_maize$paramType[grep("FB",DB_co_occ_paola_maize$paramType)]="FBs"
DB_co_occ_paola_wheat$paramType[grep("DON",DB_co_occ_paola_wheat$paramType)]="DONs"
DB_co_occ_paola_oat$paramType[grep("DON",DB_co_occ_paola_oat$paramType)]="DONs"
DB_co_occ_paola_barley$paramType[grep("DON",DB_co_occ_paola_barley$paramType)]="DONs"
###########################################################################################################################
DB_co_occ_paola_maize=DB_co_occ_paola_maize[c(which(DB_co_occ_paola_maize$paramType=="DONs"),
which(DB_co_occ_paola_maize$paramType=="FBs"),
which(DB_co_occ_paola_maize$paramType=="AF")),]
DB_co_occ_paola_wheat=DB_co_occ_paola_wheat[c(which(DB_co_occ_paola_wheat$paramType=="DONs"),
which(DB_co_occ_paola_wheat$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_barley=DB_co_occ_paola_barley[c(which(DB_co_occ_paola_barley$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_wheat$paramType=="NIV"),
which(DB_co_occ_paola_wheat$paramType=="T2+HT2")),]
DB_co_occ_paola_oat=DB_co_occ_paola_oat[c(which(DB_co_occ_paola_oat$paramType=="DONs"),
which(DB_co_occ_paola_barley$paramType=="ZEN"),
which(DB_co_occ_paola_oat$paramType=="T2+HT2"),
which(DB_co_occ_paola_oat$paramType=="NIV")),]
BY_plant_co_occur=list(maize=DB_co_occ_paola_maize,
wheat=DB_co_occ_paola_wheat,
oat=DB_co_occ_paola_oat,
barley=DB_co_occ_paola_barley)
plants_co_occur=names(BY_plant_co_occur) # 4
table_plants_co_occur=reshape::melt(unlist(lapply(BY_plant_co_occur,nrow)))
file.remove("data/table_co_occur_fin.xls")
XLConnect::writeWorksheetToFile("data/table_co_occur_fin.xls",table_plants_co_occur,"table_plants_occur")
res_tot_co_occ=list()
res_data_co_occ=list()
res_names_co_occ=list()
res_pooled_co_occ=list()
res_stats_co_occ=list()
res_prop_co_occ=list()
z=1
for ( i in 1:length(plants_co_occur)) {
temp_plant=res_co_occ_plants[[i]]
for (j in seq_along(temp_plant)) {
temp_plant_myco=temp_plant[[j]]
id_data=unique(c(which(temp_plant_myco$meanTot>0),which(temp_plant_myco$Concentration>0)))
datavalid=as.numeric(c(temp_plant_myco$meanTot[which(temp_plant_myco$meanTot>0)],temp_plant_myco$Concentration[which(temp_plant_myco$Concentration>0)]))
paramvalid=c(temp_plant_myco$paramType[which(temp_plant_myco$meanTot>0)],temp_plant_myco$paramType[which(temp_plant_myco$Concentration>0)])
paramvalid= paramvalid[which(!is.na(datavalid))]
datavalid = datavalid[!is.na(datavalid)]
if (length(datavalid)>0)
{  res_tot_co_occ[[z]]=temp_plant_myco;
res_data_co_occ[[z]]=temp_plant_myco[id_data,];
res_names_co_occ[[z]]=paste(names(res_co_occ_plants)[i],paste(unique(res_co_occ_plants[[i]][[j]]$paramType),collapse = ":"),sep=";")
res_pooled_co_occ[[z]]=datavalid
names(res_pooled_co_occ[[z]])=paramvalid
res_stats_co_occ[[z]]=c(tapply(datavalid, paste0("Mean_",paramvalid), mean),
tapply(datavalid, paste0("Sd_",paramvalid), sd),
tapply(datavalid, paste0("Max_",paramvalid), max))
res_prop_co_occ[[z]]=tapply(datavalid, paste0("Count_",paramvalid),length)
z=z+1
}
}
}
plant_myco_db_co_occ=read.csv(textConnection(unlist(res_names_co_occ)),sep=";",header=F)
names(plant_myco_db_co_occ)=c("plants","mycotoxins")
plant_myco_db_co_occ$ndata_valid=unlist(lapply(res_pooled_co_occ,length))
plant_myco_db_co_occ$nrecords=unlist(lapply(res_tot_co_occ,nrow))
plant_myco_db_co_occ$Ref=unlist(lapply(res_tot_co_occ,function(x)x$Ref[1]))
plant_myco_db_co_occ$mycotoxins=as.character(plant_myco_db_co_occ$mycotoxins)
plant_myco_db_co_occ$plants=as.character(plant_myco_db_co_occ$plants)
id_valid=grep(":",plant_myco_db_co_occ$mycotoxins)
##########################################################################################
# here co-occurence selection id_valid variables
plant_myco_db_co_occ=plant_myco_db_co_occ[id_valid,]
res=res_stats_co_occ[id_valid]
res_prop=res_prop_co_occ[id_valid]
#####################################################################################################################################################
saveRDS(res_tot_co_occ[id_valid],"data/res_tot_co_occ_sel.rds")
saveRDS(res_data_co_occ[id_valid],"data/res_data_co_occ_sel.rds")
saveRDS(res_names_co_occ[id_valid],"data/res_names_co_occ_sel.rds")
saveRDS(res_pooled_co_occ[id_valid],"data/res_pooled_co_occ_sel.rds")
#####################################################################################################################################################
# export database dump
res_pooled_co_occ=res_pooled_co_occ[id_valid]
names(res_pooled_co_occ)=sapply(1:nrow(plant_myco_db_co_occ),function(x) (paste(plant_myco_db_co_occ[x,1],plant_myco_db_co_occ[x,2],collapse=":")))
file.remove("dump/file_data_co_co_occurence.txt")
sink(file="dump/file_data_co_co_occurence.txt")
res_pooled_co_occ
sink(type = "message")
sink()
res_pool_data=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
res_pool_data[[i]]=paste(res_pooled_co_occ[[i]],collapse=";")
names()
}
resls=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
resls[[i]]=paste0(paste(names(res[[i]]),collapse=";"),";",paste(names(res_prop[[i]]),collapse=";"),";",paste(res[[i]],collapse=";"),";",paste(res_prop[[i]],collapse=";"),collapse = "")
}
plant_myco_db_co_occ$data=do.call("rbind",resls)
res_tot_occ=list()
res_data_occ=list()
res_names_occ=list()
res_pooled_occ=list()
res_stats_occ=list()
res_prop_occ=list()
z=1
for ( i in 1:length(plants_occur)) {
temp_plant=res_occ_plants[[i]]
for (j in seq_along(temp_plant)) {
temp_plant_myco=temp_plant[[j]]
id_data=unique(c(which(temp_plant_myco$meanTot>0),which(temp_plant_myco$Concentration>0)))
datavalid=as.numeric(c(temp_plant_myco$meanTot[which(temp_plant_myco$meanTot>0)],temp_plant_myco$Concentration[which(temp_plant_myco$Concentration>0)]))
paramvalid=c(temp_plant_myco$paramType[which(temp_plant_myco$meanTot>0)],temp_plant_myco$paramType[which(temp_plant_myco$Concentration>0)])
paramvalid= paramvalid[which(!is.na(datavalid))]
datavalid = datavalid[!is.na(datavalid)]
if (length(datavalid)>0)
{  res_tot_occ[[z]]=temp_plant_myco;
res_data_occ[[z]]=temp_plant_myco[id_data,];
res_names_occ[[z]]=paste(names(res_occ_plants)[i],paste(unique(res_occ_plants[[i]][[j]]$paramType),collapse = ":"),sep=";")
res_pooled_occ[[z]]=datavalid
names(res_pooled_occ[[z]])=paramvalid
res_stats_occ[[z]]=c(tapply(datavalid, paste0("Mean_",paramvalid), mean),
tapply(datavalid, paste0("Sd_",paramvalid), sd),
tapply(datavalid, paste0("Max_",paramvalid), max))
res_prop_occ[[z]]=tapply(datavalid, paste0("Count_",paramvalid),length)
z=z+1
}
}
}
plant_myco_db_occ=read.csv(textConnection(unlist(res_names_occ)),sep=";",header=F)
names(plant_myco_db_occ)=c("plants","mycotoxins")
plant_myco_db_occ$ndata_valid=unlist(lapply(res_pooled_occ,length))
plant_myco_db_occ$nrecords=unlist(lapply(res_tot_occ,nrow))
plant_myco_db_occ$Ref=unlist(lapply(res_tot_occ,function(x)x$Ref[1]))
plant_myco_db_occ$mycotoxins=as.character(plant_myco_db_occ$mycotoxins)
plant_myco_db_occ$plants=as.character(plant_myco_db_occ$plants)
id_valid=grep(":",plant_myco_db_occ$mycotoxins)
##########################################################################################
# here co-occurence selection id_valid variables
plant_myco_db_occ=plant_myco_db_occ[id_valid,]
res=res_stats_occ[id_valid]
res_prop=res_prop_occ[id_valid]
#####################################################################################################################################################
saveRDS(res_tot_occ[id_valid],"data/res_tot_occ_sel.rds")
saveRDS(res_data_occ[id_valid],"data/res_data_occ_sel.rds")
saveRDS(res_names_occ[id_valid],"data/res_names_occ_sel.rds")
saveRDS(res_pooled_occ[id_valid],"data/res_pooled_occ_sel.rds")
#####################################################################################################################################################
# export database dump
res_pooled_occ=res_pooled_occ[id_valid]
names(res_pooled_occ)=sapply(1:nrow(plant_myco_db_occ),function(x) (paste(plant_myco_db_occ[x,1],plant_myco_db_occ[x,2],collapse=":")))
file.remove("dump/file_data_co_occurence.txt")
sink(file="dump/file_data_co_occurence.txt")
res_pooled_occ
sink(type = "message")
sink()
res_pool_data=list()
for (i in 1:nrow(plant_myco_db_occ)){
res_pool_data[[i]]=paste(res_pooled_occ[[i]],collapse=";")
names()
}
resls=list()
for (i in 1:nrow(plant_myco_db_occ)){
resls[[i]]=paste0(paste(names(res[[i]]),collapse=";"),";",paste(names(res_prop[[i]]),collapse=";"),";",paste(res[[i]],collapse=";"),";",paste(res_prop[[i]],collapse=";"),collapse = "")
}
plant_myco_db_occ$data=do.call("rbind",resls)
res_tot_co_occ=list()
res_data_co_occ=list()
res_names_co_occ=list()
res_pooled_co_occ=list()
res_stats_co_occ=list()
res_prop_co_occ=list()
z=1
for ( i in 1:length(plants_co_occur)) {
temp_plant=res_co_occ_plants[[i]]
for (j in seq_along(temp_plant)) {
temp_plant_myco=temp_plant[[j]]
id_data=unique(c(which(temp_plant_myco$meanTot>0),which(temp_plant_myco$Concentration>0)))
datavalid=as.numeric(c(temp_plant_myco$meanTot[which(temp_plant_myco$meanTot>0)],temp_plant_myco$Concentration[which(temp_plant_myco$Concentration>0)]))
paramvalid=c(temp_plant_myco$paramType[which(temp_plant_myco$meanTot>0)],temp_plant_myco$paramType[which(temp_plant_myco$Concentration>0)])
paramvalid= paramvalid[which(!is.na(datavalid))]
datavalid = datavalid[!is.na(datavalid)]
if (length(datavalid)>0)
{  res_tot_co_occ[[z]]=temp_plant_myco;
res_data_co_occ[[z]]=temp_plant_myco[id_data,];
res_names_co_occ[[z]]=paste(names(res_co_occ_plants)[i],paste(unique(res_co_occ_plants[[i]][[j]]$paramType),collapse = ":"),sep=";")
res_pooled_co_occ[[z]]=datavalid
names(res_pooled_co_occ[[z]])=paramvalid
res_stats_co_occ[[z]]=c(tapply(datavalid, paste0("Mean_",paramvalid), mean),
tapply(datavalid, paste0("Sd_",paramvalid), sd),
tapply(datavalid, paste0("Max_",paramvalid), max))
res_prop_co_occ[[z]]=tapply(datavalid, paste0("Count_",paramvalid),length)
z=z+1
}
}
}
plant_myco_db_co_occ=read.csv(textConnection(unlist(res_names_co_occ)),sep=";",header=F)
names(plant_myco_db_co_occ)=c("plants","mycotoxins")
plant_myco_db_co_occ$ndata_valid=unlist(lapply(res_pooled_co_occ,length))
plant_myco_db_co_occ$nrecords=unlist(lapply(res_tot_co_occ,nrow))
plant_myco_db_co_occ$Ref=unlist(lapply(res_tot_co_occ,function(x)x$Ref[1]))
plant_myco_db_co_occ$mycotoxins=as.character(plant_myco_db_co_occ$mycotoxins)
plant_myco_db_co_occ$plants=as.character(plant_myco_db_co_occ$plants)
id_valid=grep(":",plant_myco_db_co_occ$mycotoxins)
##########################################################################################
# here co-occurence selection id_valid variables
plant_myco_db_co_occ=plant_myco_db_co_occ[id_valid,]
res=res_stats_co_occ[id_valid]
res_prop=res_prop_co_occ[id_valid]
#####################################################################################################################################################
saveRDS(res_tot_co_occ[id_valid],"data/res_tot_co_occ_sel.rds")
saveRDS(res_data_co_occ[id_valid],"data/res_data_co_occ_sel.rds")
saveRDS(res_names_co_occ[id_valid],"data/res_names_co_occ_sel.rds")
saveRDS(res_pooled_co_occ[id_valid],"data/res_pooled_co_occ_sel.rds")
res_pooled_co_occ=res_pooled_co_occ[id_valid]
names(res_pooled_co_occ)=sapply(1:nrow(plant_myco_db_co_occ),function(x) (paste(plant_myco_db_co_occ[x,1],plant_myco_db_co_occ[x,2],collapse=":")))
file.remove("dump/file_data_co_co_occurence.txt")
sink(file="dump/file_data_co_co_occurence.txt")
res_pooled_co_occ
sink(type = "message")
sink()
res_pool_data=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
res_pool_data[[i]]=paste(res_pooled_co_occ[[i]],collapse=";")
names()
}
resls=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
resls[[i]]=paste0(paste(names(res[[i]]),collapse=";"),";",paste(names(res_prop[[i]]),collapse=";"),";",paste(res[[i]],collapse=";"),";",paste(res_prop[[i]],collapse=";"),collapse = "")
}
res_tot_co_occ=list()
res_data_co_occ=list()
res_names_co_occ=list()
res_pooled_co_occ=list()
res_stats_co_occ=list()
res_prop_co_occ=list()
z=1
for ( i in 1:length(plants_co_occur)) {
temp_plant=res_co_occ_plants[[i]]
for (j in seq_along(temp_plant)) {
temp_plant_myco=temp_plant[[j]]
id_data=unique(c(which(temp_plant_myco$meanTot>0),which(temp_plant_myco$Concentration>0)))
datavalid=as.numeric(c(temp_plant_myco$meanTot[which(temp_plant_myco$meanTot>0)],temp_plant_myco$Concentration[which(temp_plant_myco$Concentration>0)]))
paramvalid=c(temp_plant_myco$paramType[which(temp_plant_myco$meanTot>0)],temp_plant_myco$paramType[which(temp_plant_myco$Concentration>0)])
paramvalid= paramvalid[which(!is.na(datavalid))]
datavalid = datavalid[!is.na(datavalid)]
if (length(datavalid)>0)
{  res_tot_co_occ[[z]]=temp_plant_myco;
res_data_co_occ[[z]]=temp_plant_myco[id_data,];
res_names_co_occ[[z]]=paste(names(res_co_occ_plants)[i],paste(unique(res_co_occ_plants[[i]][[j]]$paramType),collapse = ":"),sep=";")
res_pooled_co_occ[[z]]=datavalid
names(res_pooled_co_occ[[z]])=paramvalid
res_stats_co_occ[[z]]=c(tapply(datavalid, paste0("Mean_",paramvalid), mean),
tapply(datavalid, paste0("Sd_",paramvalid), sd),
tapply(datavalid, paste0("Max_",paramvalid), max))
res_prop_co_occ[[z]]=tapply(datavalid, paste0("Count_",paramvalid),length)
z=z+1
}
}
}
plant_myco_db_co_occ=read.csv(textConnection(unlist(res_names_co_occ)),sep=";",header=F)
names(plant_myco_db_co_occ)=c("plants","mycotoxins")
plant_myco_db_co_occ$ndata_valid=unlist(lapply(res_pooled_co_occ,length))
plant_myco_db_co_occ$nrecords=unlist(lapply(res_tot_co_occ,nrow))
plant_myco_db_co_occ$Ref=unlist(lapply(res_tot_co_occ,function(x)x$Ref[1]))
plant_myco_db_co_occ$mycotoxins=as.character(plant_myco_db_co_occ$mycotoxins)
plant_myco_db_co_occ$plants=as.character(plant_myco_db_co_occ$plants)
id_valid=grep(":",plant_myco_db_co_occ$mycotoxins)
##########################################################################################
# here co-occurence selection id_valid variables
plant_myco_db_co_occ=plant_myco_db_co_occ[id_valid,]
res=res_stats_co_occ[id_valid]
res_prop=res_prop_co_occ[id_valid]
#####################################################################################################################################################
saveRDS(res_tot_co_occ[id_valid],"data/res_tot_co_occ_sel.rds")
saveRDS(res_data_co_occ[id_valid],"data/res_data_co_occ_sel.rds")
saveRDS(res_names_co_occ[id_valid],"data/res_names_co_occ_sel.rds")
saveRDS(res_pooled_co_occ[id_valid],"data/res_pooled_co_occ_sel.rds")
id_valid
res_tot_co_occ=list()
res_data_co_occ=list()
res_names_co_occ=list()
res_pooled_co_occ=list()
res_stats_co_occ=list()
res_prop_co_occ=list()
z=1
for ( i in 1:length(plants_co_occur)) {
temp_plant=res_co_occ_plants[[i]]
for (j in seq_along(temp_plant)) {
temp_plant_myco=temp_plant[[j]]
id_data=unique(c(which(temp_plant_myco$meanTot>0),which(temp_plant_myco$Concentration>0)))
datavalid=as.numeric(c(temp_plant_myco$meanTot[which(temp_plant_myco$meanTot>0)],temp_plant_myco$Concentration[which(temp_plant_myco$Concentration>0)]))
paramvalid=c(temp_plant_myco$paramType[which(temp_plant_myco$meanTot>0)],temp_plant_myco$paramType[which(temp_plant_myco$Concentration>0)])
paramvalid= paramvalid[which(!is.na(datavalid))]
datavalid = datavalid[!is.na(datavalid)]
if (length(datavalid)>0)
{  res_tot_co_occ[[z]]=temp_plant_myco;
res_data_co_occ[[z]]=temp_plant_myco[id_data,];
res_names_co_occ[[z]]=paste(names(res_co_occ_plants)[i],paste(unique(res_co_occ_plants[[i]][[j]]$paramType),collapse = ":"),sep=";")
res_pooled_co_occ[[z]]=datavalid
names(res_pooled_co_occ[[z]])=paramvalid
res_stats_co_occ[[z]]=c(tapply(datavalid, paste0("Mean_",paramvalid), mean),
tapply(datavalid, paste0("Sd_",paramvalid), sd),
tapply(datavalid, paste0("Max_",paramvalid), max))
res_prop_co_occ[[z]]=tapply(datavalid, paste0("Count_",paramvalid),length)
z=z+1
}
}
}
plant_myco_db_co_occ=read.csv(textConnection(unlist(res_names_co_occ)),sep=";",header=F)
names(plant_myco_db_co_occ)=c("plants","mycotoxins")
plant_myco_db_co_occ$ndata_valid=unlist(lapply(res_pooled_co_occ,length))
plant_myco_db_co_occ$nrecords=unlist(lapply(res_tot_co_occ,nrow))
plant_myco_db_co_occ$Ref=unlist(lapply(res_tot_co_occ,function(x)x$Ref[1]))
plant_myco_db_co_occ$mycotoxins=as.character(plant_myco_db_co_occ$mycotoxins)
plant_myco_db_co_occ$plants=as.character(plant_myco_db_co_occ$plants)
id_valid=grep(":",plant_myco_db_co_occ$mycotoxins)
##########################################################################################
# here co-occurence selection id_valid variables
plant_myco_db_co_occ=plant_myco_db_co_occ[id_valid,]
res=res_stats_co_occ[id_valid]
res_prop=res_prop_co_occ[id_valid]
#####################################################################################################################################################
saveRDS(res_tot_co_occ[id_valid],"data/res_tot_co_occ_sel.rds")
saveRDS(res_data_co_occ[id_valid],"data/res_data_co_occ_sel.rds")
saveRDS(res_names_co_occ[id_valid],"data/res_names_co_occ_sel.rds")
saveRDS(res_pooled_co_occ[id_valid],"data/res_pooled_co_occ_sel.rds")
#####################################################################################################################################################
# export databases
res_pooled_co_occ=res_pooled_co_occ[id_valid]
names(res_pooled_co_occ)=sapply(1:nrow(plant_myco_db_co_occ),function(x) (paste(plant_myco_db_co_occ[x,1],plant_myco_db_co_occ[x,2],collapse=":")))
file.remove("dump/file_data_co_co_occurence.txt")
sink(file="dump/file_data_co_co_occurence.txt")
res_pooled_co_occ
sink(type = "message")
sink()
res_pool_data=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
res_pool_data[[i]]=paste(res_pooled_co_occ[[i]],collapse=";")
names()
}
resls=list()
for (i in 1:nrow(plant_myco_db_co_occ)){
resls[[i]]=paste0(paste(names(res[[i]]),collapse=";"),";",paste(names(res_prop[[i]]),collapse=";"),";",paste(res[[i]],collapse=";"),";",paste(res_prop[[i]],collapse=";"),collapse = "")
}
plant_myco_db_co_occ$data=do.call("rbind",resls)
plant_myco_db_co_occ
file.remove("data/mycotoxins_co_occurence_ONEtable_fin.xls")
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_ONEtable_fin.xls",plant_myco_db_co_occ,"table data co-occurence")
file.remove("data/mycotoxins_co_occurence_MULTItable_fin.xls")
plant_myco_db_co_occ_ls=split(plant_myco_db_co_occ,as.factor(paste(plant_myco_db_co_occ$plants,plant_myco_db_co_occ$mycotoxins)))
for ( i in seq_along(plant_myco_db_occ_ls)) {
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_MULTItable_fin.xls",plant_myco_db_co_occ_ls[[i]],gsub(":"," ",substr(names(plant_myco_db_occ_ls)[i],1,15)))
}
# AFTER CREATE MANUALLY ANOTHER EXCEL FILE ARRANGED  mycotoxins_co_occurence_fin_arranged.xls
saveRDS(plant_myco_db_occ,"data/plant_myco_db_occ_fin.rds")
plant_myco_db_co_occ_ls=split(plant_myco_db_co_occ,as.factor(paste(plant_myco_db_co_occ$plants,plant_myco_db_co_occ$mycotoxins)))
file.remove("data/mycotoxins_co_occurence_ONEtable_fin.xls")
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_ONEtable_fin.xls",plant_myco_db_co_occ,"table data co-occurence")
file.remove("data/mycotoxins_co_occurence_MULTItable_fin.xls")
plant_myco_db_co_occ_ls=split(plant_myco_db_co_occ,as.factor(paste(plant_myco_db_co_occ$plants,plant_myco_db_co_occ$mycotoxins)))
file.remove("data/mycotoxins_co_occurence_MULTItable_fin.xls")
plant_myco_db_co_occ_ls=split(plant_myco_db_co_occ,as.factor(paste(plant_myco_db_co_occ$plants,plant_myco_db_co_occ$mycotoxins)))
for ( i in seq_along(plant_myco_db_co_occ_ls)) {
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_MULTItable_fin.xls",plant_myco_db_co_occ_ls[[i]],gsub(":"," ",substr(names(plant_myco_db_occ_ls)[i],1,15)))
}
# AFTER CREATE MANUALLY ANOTHER EXCEL FILE ARRANGED  mycotoxins_co_occurence_fin_arranged.xls
saveRDS(plant_myco_db_occ,"data/plant_myco_db_occ_fin.rds")
file.remove("data/mycotoxins_co_occurence_MULTItable_fin.xls")
plant_myco_db_co_occ_ls=split(plant_myco_db_co_occ,as.factor(paste(plant_myco_db_co_occ$plants,plant_myco_db_co_occ$mycotoxins)))
for ( i in seq_along(plant_myco_db_co_occ_ls)) {
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_MULTItable_fin.xls",plant_myco_db_co_occ_ls[[i]],gsub(":"," ",substr(names(plant_myco_db_co_occ_ls)[i],1,15)))
}
# AFTER CREATE MANUALLY ANOTHER EXCEL FILE ARRANGED  mycotoxins_co_occurence_fin_arranged.xls
saveRDS(plant_myco_db_co_occ,"data/plant_myco_db_occ_fin.rds")
file.remove("data/mycotoxins_co_occurence_ONEtable_fin.xls")
XLConnect::writeWorksheetToFile("data/mycotoxins_co_occurence_ONEtable_fin.xls",plant_myco_db_co_occ,"table data co-occurence")
??suncalc
